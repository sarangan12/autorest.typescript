/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreHttps from "@azure/core-rest-pipeline";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyDurationClientContext } from "../bodyDurationClientContext";
import {
  DurationGetNullResponse,
  DurationGetPositiveDurationResponse,
  DurationGetInvalidResponse
} from "../models";

/** Class representing a Duration. */
export class Duration {
  private readonly client: BodyDurationClientContext;

  /**
   * Initialize a new instance of the class Duration class.
   * @param client Reference to the service client
   */
  constructor(client: BodyDurationClientContext) {
    this.client = client;
  }

  /**
   * Get null duration value
   * @param options The options parameters.
   */
  getNull(
    options?: coreClient.OperationOptions
  ): Promise<DurationGetNullResponse> {
    return this.client.sendOperationRequest({ options }, getNullOperationSpec);
  }

  /**
   * Put a positive duration value
   * @param durationBody duration body
   * @param options The options parameters.
   */
  putPositiveDuration(
    durationBody: string,
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { durationBody, options },
      putPositiveDurationOperationSpec
    );
  }

  /**
   * Get a positive duration value
   * @param options The options parameters.
   */
  getPositiveDuration(
    options?: coreClient.OperationOptions
  ): Promise<DurationGetPositiveDurationResponse> {
    return this.client.sendOperationRequest(
      { options },
      getPositiveDurationOperationSpec
    );
  }

  /**
   * Get an invalid duration value
   * @param options The options parameters.
   */
  getInvalid(
    options?: coreClient.OperationOptions
  ): Promise<DurationGetInvalidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getInvalidOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getNullOperationSpec: coreClient.OperationSpec = {
  path: "/duration/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "TimeSpan" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putPositiveDurationOperationSpec: coreClient.OperationSpec = {
  path: "/duration/positiveduration",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.durationBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getPositiveDurationOperationSpec: coreClient.OperationSpec = {
  path: "/duration/positiveduration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "TimeSpan" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getInvalidOperationSpec: coreClient.OperationSpec = {
  path: "/duration/invalid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "TimeSpan" } }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
