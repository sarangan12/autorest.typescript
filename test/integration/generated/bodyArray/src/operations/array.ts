/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreHttps from "@azure/core-rest-pipeline";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyArrayClientContext } from "../bodyArrayClientContext";
import {
  ArrayGetNullResponse,
  ArrayGetInvalidResponse,
  ArrayGetEmptyResponse,
  ArrayGetBooleanTfftResponse,
  ArrayGetBooleanInvalidNullResponse,
  ArrayGetBooleanInvalidStringResponse,
  ArrayGetIntegerValidResponse,
  ArrayGetIntInvalidNullResponse,
  ArrayGetIntInvalidStringResponse,
  ArrayGetLongValidResponse,
  ArrayGetLongInvalidNullResponse,
  ArrayGetLongInvalidStringResponse,
  ArrayGetFloatValidResponse,
  ArrayGetFloatInvalidNullResponse,
  ArrayGetFloatInvalidStringResponse,
  ArrayGetDoubleValidResponse,
  ArrayGetDoubleInvalidNullResponse,
  ArrayGetDoubleInvalidStringResponse,
  ArrayGetStringValidResponse,
  ArrayGetEnumValidResponse,
  FooEnum,
  ArrayGetStringEnumValidResponse,
  Enum1,
  ArrayGetStringWithNullResponse,
  ArrayGetStringWithInvalidResponse,
  ArrayGetUuidValidResponse,
  ArrayGetUuidInvalidCharsResponse,
  ArrayGetDateValidResponse,
  ArrayGetDateInvalidNullResponse,
  ArrayGetDateInvalidCharsResponse,
  ArrayGetDateTimeValidResponse,
  ArrayGetDateTimeInvalidNullResponse,
  ArrayGetDateTimeInvalidCharsResponse,
  ArrayGetDateTimeRfc1123ValidResponse,
  ArrayGetDurationValidResponse,
  ArrayGetByteValidResponse,
  ArrayGetByteInvalidNullResponse,
  ArrayGetBase64UrlResponse,
  ArrayGetComplexNullResponse,
  ArrayGetComplexEmptyResponse,
  ArrayGetComplexItemNullResponse,
  ArrayGetComplexItemEmptyResponse,
  ArrayGetComplexValidResponse,
  Product,
  ArrayGetArrayNullResponse,
  ArrayGetArrayEmptyResponse,
  ArrayGetArrayItemNullResponse,
  ArrayGetArrayItemEmptyResponse,
  ArrayGetArrayValidResponse,
  ArrayGetDictionaryNullResponse,
  ArrayGetDictionaryEmptyResponse,
  ArrayGetDictionaryItemNullResponse,
  ArrayGetDictionaryItemEmptyResponse,
  ArrayGetDictionaryValidResponse
} from "../models";

/** Class representing a Array. */
export class Array {
  private readonly client: BodyArrayClientContext;

  /**
   * Initialize a new instance of the class Array class.
   * @param client Reference to the service client
   */
  constructor(client: BodyArrayClientContext) {
    this.client = client;
  }

  /**
   * Get null array value
   * @param options The options parameters.
   */
  getNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetNullResponse> {
    return this.client.sendOperationRequest({ options }, getNullOperationSpec);
  }

  /**
   * Get invalid array [1, 2, 3
   * @param options The options parameters.
   */
  getInvalid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetInvalidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getInvalidOperationSpec
    );
  }

  /**
   * Get empty array value []
   * @param options The options parameters.
   */
  getEmpty(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetEmptyResponse> {
    return this.client.sendOperationRequest({ options }, getEmptyOperationSpec);
  }

  /**
   * Set array value empty []
   * @param arrayBody The empty array value []
   * @param options The options parameters.
   */
  putEmpty(
    arrayBody: string[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putEmptyOperationSpec
    );
  }

  /**
   * Get boolean array value [true, false, false, true]
   * @param options The options parameters.
   */
  getBooleanTfft(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetBooleanTfftResponse> {
    return this.client.sendOperationRequest(
      { options },
      getBooleanTfftOperationSpec
    );
  }

  /**
   * Set array value empty [true, false, false, true]
   * @param arrayBody The array value [true, false, false, true]
   * @param options The options parameters.
   */
  putBooleanTfft(
    arrayBody: boolean[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putBooleanTfftOperationSpec
    );
  }

  /**
   * Get boolean array value [true, null, false]
   * @param options The options parameters.
   */
  getBooleanInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetBooleanInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getBooleanInvalidNullOperationSpec
    );
  }

  /**
   * Get boolean array value [true, 'boolean', false]
   * @param options The options parameters.
   */
  getBooleanInvalidString(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetBooleanInvalidStringResponse> {
    return this.client.sendOperationRequest(
      { options },
      getBooleanInvalidStringOperationSpec
    );
  }

  /**
   * Get integer array value [1, -1, 3, 300]
   * @param options The options parameters.
   */
  getIntegerValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetIntegerValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getIntegerValidOperationSpec
    );
  }

  /**
   * Set array value empty [1, -1, 3, 300]
   * @param arrayBody The array value [1, -1, 3, 300]
   * @param options The options parameters.
   */
  putIntegerValid(
    arrayBody: number[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putIntegerValidOperationSpec
    );
  }

  /**
   * Get integer array value [1, null, 0]
   * @param options The options parameters.
   */
  getIntInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetIntInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getIntInvalidNullOperationSpec
    );
  }

  /**
   * Get integer array value [1, 'integer', 0]
   * @param options The options parameters.
   */
  getIntInvalidString(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetIntInvalidStringResponse> {
    return this.client.sendOperationRequest(
      { options },
      getIntInvalidStringOperationSpec
    );
  }

  /**
   * Get integer array value [1, -1, 3, 300]
   * @param options The options parameters.
   */
  getLongValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetLongValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getLongValidOperationSpec
    );
  }

  /**
   * Set array value empty [1, -1, 3, 300]
   * @param arrayBody The array value [1, -1, 3, 300]
   * @param options The options parameters.
   */
  putLongValid(
    arrayBody: number[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putLongValidOperationSpec
    );
  }

  /**
   * Get long array value [1, null, 0]
   * @param options The options parameters.
   */
  getLongInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetLongInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getLongInvalidNullOperationSpec
    );
  }

  /**
   * Get long array value [1, 'integer', 0]
   * @param options The options parameters.
   */
  getLongInvalidString(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetLongInvalidStringResponse> {
    return this.client.sendOperationRequest(
      { options },
      getLongInvalidStringOperationSpec
    );
  }

  /**
   * Get float array value [0, -0.01, 1.2e20]
   * @param options The options parameters.
   */
  getFloatValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetFloatValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getFloatValidOperationSpec
    );
  }

  /**
   * Set array value [0, -0.01, 1.2e20]
   * @param arrayBody The array value [0, -0.01, 1.2e20]
   * @param options The options parameters.
   */
  putFloatValid(
    arrayBody: number[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putFloatValidOperationSpec
    );
  }

  /**
   * Get float array value [0.0, null, -1.2e20]
   * @param options The options parameters.
   */
  getFloatInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetFloatInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getFloatInvalidNullOperationSpec
    );
  }

  /**
   * Get boolean array value [1.0, 'number', 0.0]
   * @param options The options parameters.
   */
  getFloatInvalidString(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetFloatInvalidStringResponse> {
    return this.client.sendOperationRequest(
      { options },
      getFloatInvalidStringOperationSpec
    );
  }

  /**
   * Get float array value [0, -0.01, 1.2e20]
   * @param options The options parameters.
   */
  getDoubleValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDoubleValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDoubleValidOperationSpec
    );
  }

  /**
   * Set array value [0, -0.01, 1.2e20]
   * @param arrayBody The array value [0, -0.01, 1.2e20]
   * @param options The options parameters.
   */
  putDoubleValid(
    arrayBody: number[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDoubleValidOperationSpec
    );
  }

  /**
   * Get float array value [0.0, null, -1.2e20]
   * @param options The options parameters.
   */
  getDoubleInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDoubleInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDoubleInvalidNullOperationSpec
    );
  }

  /**
   * Get boolean array value [1.0, 'number', 0.0]
   * @param options The options parameters.
   */
  getDoubleInvalidString(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDoubleInvalidStringResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDoubleInvalidStringOperationSpec
    );
  }

  /**
   * Get string array value ['foo1', 'foo2', 'foo3']
   * @param options The options parameters.
   */
  getStringValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetStringValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getStringValidOperationSpec
    );
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   * @param arrayBody The array value ['foo1', 'foo2', 'foo3']
   * @param options The options parameters.
   */
  putStringValid(
    arrayBody: string[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putStringValidOperationSpec
    );
  }

  /**
   * Get enum array value ['foo1', 'foo2', 'foo3']
   * @param options The options parameters.
   */
  getEnumValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetEnumValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getEnumValidOperationSpec
    );
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   * @param arrayBody The array value ['foo1', 'foo2', 'foo3']
   * @param options The options parameters.
   */
  putEnumValid(
    arrayBody: FooEnum[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putEnumValidOperationSpec
    );
  }

  /**
   * Get enum array value ['foo1', 'foo2', 'foo3']
   * @param options The options parameters.
   */
  getStringEnumValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetStringEnumValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getStringEnumValidOperationSpec
    );
  }

  /**
   * Set array value ['foo1', 'foo2', 'foo3']
   * @param arrayBody The array value ['foo1', 'foo2', 'foo3']
   * @param options The options parameters.
   */
  putStringEnumValid(
    arrayBody: Enum1[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putStringEnumValidOperationSpec
    );
  }

  /**
   * Get string array value ['foo', null, 'foo2']
   * @param options The options parameters.
   */
  getStringWithNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetStringWithNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getStringWithNullOperationSpec
    );
  }

  /**
   * Get string array value ['foo', 123, 'foo2']
   * @param options The options parameters.
   */
  getStringWithInvalid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetStringWithInvalidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getStringWithInvalidOperationSpec
    );
  }

  /**
   * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
   * 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
   * @param options The options parameters.
   */
  getUuidValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetUuidValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getUuidValidOperationSpec
    );
  }

  /**
   * Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db',
   * 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
   * @param arrayBody The array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
   *                  'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
   * @param options The options parameters.
   */
  putUuidValid(
    arrayBody: string[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putUuidValidOperationSpec
    );
  }

  /**
   * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
   * @param options The options parameters.
   */
  getUuidInvalidChars(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetUuidInvalidCharsResponse> {
    return this.client.sendOperationRequest(
      { options },
      getUuidInvalidCharsOperationSpec
    );
  }

  /**
   * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
   * @param options The options parameters.
   */
  getDateValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDateValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateValidOperationSpec
    );
  }

  /**
   * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
   * @param arrayBody The array value ['2000-12-01', '1980-01-02', '1492-10-12']
   * @param options The options parameters.
   */
  putDateValid(
    arrayBody: Date[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDateValidOperationSpec
    );
  }

  /**
   * Get date array value ['2012-01-01', null, '1776-07-04']
   * @param options The options parameters.
   */
  getDateInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDateInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateInvalidNullOperationSpec
    );
  }

  /**
   * Get date array value ['2011-03-22', 'date']
   * @param options The options parameters.
   */
  getDateInvalidChars(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDateInvalidCharsResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateInvalidCharsOperationSpec
    );
  }

  /**
   * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
   * '1492-10-12T10:15:01-08:00']
   * @param options The options parameters.
   */
  getDateTimeValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDateTimeValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateTimeValidOperationSpec
    );
  }

  /**
   * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
   * @param arrayBody The array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
   *                  '1492-10-12T10:15:01-08:00']
   * @param options The options parameters.
   */
  putDateTimeValid(
    arrayBody: Date[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDateTimeValidOperationSpec
    );
  }

  /**
   * Get date array value ['2000-12-01t00:00:01z', null]
   * @param options The options parameters.
   */
  getDateTimeInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDateTimeInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateTimeInvalidNullOperationSpec
    );
  }

  /**
   * Get date array value ['2000-12-01t00:00:01z', 'date-time']
   * @param options The options parameters.
   */
  getDateTimeInvalidChars(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDateTimeInvalidCharsResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateTimeInvalidCharsOperationSpec
    );
  }

  /**
   * Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed,
   * 12 Oct 1492 10:15:01 GMT']
   * @param options The options parameters.
   */
  getDateTimeRfc1123Valid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDateTimeRfc1123ValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateTimeRfc1123ValidOperationSpec
    );
  }

  /**
   * Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct
   * 1492 10:15:01 GMT']
   * @param arrayBody The array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT',
   *                  'Wed, 12 Oct 1492 10:15:01 GMT']
   * @param options The options parameters.
   */
  putDateTimeRfc1123Valid(
    arrayBody: Date[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDateTimeRfc1123ValidOperationSpec
    );
  }

  /**
   * Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
   * @param options The options parameters.
   */
  getDurationValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDurationValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDurationValidOperationSpec
    );
  }

  /**
   * Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
   * @param arrayBody The array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
   * @param options The options parameters.
   */
  putDurationValid(
    arrayBody: string[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDurationValidOperationSpec
    );
  }

  /**
   * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in
   * base64
   * @param options The options parameters.
   */
  getByteValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetByteValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getByteValidOperationSpec
    );
  }

  /**
   * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in
   * base 64
   * @param arrayBody The array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each
   *                  elementencoded in base 64
   * @param options The options parameters.
   */
  putByteValid(
    arrayBody: Uint8Array[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putByteValidOperationSpec
    );
  }

  /**
   * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
   * @param options The options parameters.
   */
  getByteInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetByteInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getByteInvalidNullOperationSpec
    );
  }

  /**
   * Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the
   * items base64url encoded
   * @param options The options parameters.
   */
  getBase64Url(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetBase64UrlResponse> {
    return this.client.sendOperationRequest(
      { options },
      getBase64UrlOperationSpec
    );
  }

  /**
   * Get array of complex type null value
   * @param options The options parameters.
   */
  getComplexNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetComplexNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplexNullOperationSpec
    );
  }

  /**
   * Get empty array of complex type []
   * @param options The options parameters.
   */
  getComplexEmpty(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetComplexEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplexEmptyOperationSpec
    );
  }

  /**
   * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5,
   * 'string': '6'}]
   * @param options The options parameters.
   */
  getComplexItemNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetComplexItemNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplexItemNullOperationSpec
    );
  }

  /**
   * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5,
   * 'string': '6'}]
   * @param options The options parameters.
   */
  getComplexItemEmpty(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetComplexItemEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplexItemEmptyOperationSpec
    );
  }

  /**
   * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'},
   * {'integer': 5, 'string': '6'}]
   * @param options The options parameters.
   */
  getComplexValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetComplexValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplexValidOperationSpec
    );
  }

  /**
   * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string':
   * '4'}, {'integer': 5, 'string': '6'}]
   * @param arrayBody array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string':
   *                  '4'}, {'integer': 5, 'string': '6'}]
   * @param options The options parameters.
   */
  putComplexValid(
    arrayBody: Product[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putComplexValidOperationSpec
    );
  }

  /**
   * Get a null array
   * @param options The options parameters.
   */
  getArrayNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetArrayNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getArrayNullOperationSpec
    );
  }

  /**
   * Get an empty array []
   * @param options The options parameters.
   */
  getArrayEmpty(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetArrayEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getArrayEmptyOperationSpec
    );
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
   * @param options The options parameters.
   */
  getArrayItemNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetArrayItemNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getArrayItemNullOperationSpec
    );
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
   * @param options The options parameters.
   */
  getArrayItemEmpty(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetArrayItemEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getArrayItemEmptyOperationSpec
    );
  }

  /**
   * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
   * @param options The options parameters.
   */
  getArrayValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetArrayValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getArrayValidOperationSpec
    );
  }

  /**
   * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
   * @param arrayBody An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
   * @param options The options parameters.
   */
  putArrayValid(
    arrayBody: string[][],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putArrayValidOperationSpec
    );
  }

  /**
   * Get an array of Dictionaries with value null
   * @param options The options parameters.
   */
  getDictionaryNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDictionaryNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDictionaryNullOperationSpec
    );
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value []
   * @param options The options parameters.
   */
  getDictionaryEmpty(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDictionaryEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDictionaryEmptyOperationSpec
    );
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   * @param options The options parameters.
   */
  getDictionaryItemNull(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDictionaryItemNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDictionaryItemNullOperationSpec
    );
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   * @param options The options parameters.
   */
  getDictionaryItemEmpty(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDictionaryItemEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDictionaryItemEmptyOperationSpec
    );
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   * @param options The options parameters.
   */
  getDictionaryValid(
    options?: coreClient.OperationOptions
  ): Promise<ArrayGetDictionaryValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDictionaryValidOperationSpec
    );
  }

  /**
   * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
   * 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
   * @param arrayBody An array of Dictionaries of type <string, string> with value [{'1': 'one', '2':
   *                  'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9':
   *                  'nine'}]
   * @param options The options parameters.
   */
  putDictionaryValid(
    arrayBody: { [propertyName: string]: string }[],
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDictionaryValidOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getInvalidOperationSpec: coreClient.OperationSpec = {
  path: "/array/invalid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/array/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/array/empty",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getBooleanTfftOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/boolean/tfft",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Boolean" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putBooleanTfftOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/boolean/tfft",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getBooleanInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/boolean/true.null.false",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Boolean" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getBooleanInvalidStringOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/boolean/true.boolean.false",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Boolean" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getIntegerValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/integer/1.-1.3.300",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putIntegerValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/integer/1.-1.3.300",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getIntInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/integer/1.null.zero",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getIntInvalidStringOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/integer/1.integer.0",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getLongValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/long/1.-1.3.300",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putLongValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/long/1.-1.3.300",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getLongInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/long/1.null.zero",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getLongInvalidStringOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/long/1.integer.0",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getFloatValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/float/0--0.01-1.2e20",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putFloatValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/float/0--0.01-1.2e20",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getFloatInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/float/0.0-null-1.2e20",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getFloatInvalidStringOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/float/1.number.0",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDoubleValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/double/0--0.01-1.2e20",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDoubleValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/double/0--0.01-1.2e20",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDoubleInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/double/0.0-null-1.2e20",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDoubleInvalidStringOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/double/1.number.0",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getStringValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/string/foo1.foo2.foo3",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putStringValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/string/foo1.foo2.foo3",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getEnumValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/enum/foo1.foo2.foo3",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Enum", allowedValues: ["foo1", "foo2", "foo3"] }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putEnumValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/enum/foo1.foo2.foo3",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody3,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getStringEnumValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/string-enum/foo1.foo2.foo3",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putStringEnumValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/string-enum/foo1.foo2.foo3",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getStringWithNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/string/foo.null.foo2",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getStringWithInvalidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/string/foo.123.foo2",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getUuidValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/uuid/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Uuid" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putUuidValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/uuid/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody5,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getUuidInvalidCharsOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/uuid/invalidchars",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Uuid" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDateValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/date/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Date" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDateValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/date/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody6,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDateInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/date/invalidnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Date" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDateInvalidCharsOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/date/invalidchars",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Date" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDateTimeValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/date-time/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "DateTime" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDateTimeValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/date-time/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody7,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDateTimeInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/date-time/invalidnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "DateTime" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDateTimeInvalidCharsOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/date-time/invalidchars",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "DateTime" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDateTimeRfc1123ValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/date-time-rfc1123/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "DateTimeRfc1123" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDateTimeRfc1123ValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/date-time-rfc1123/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody8,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDurationValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/duration/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "TimeSpan" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDurationValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/duration/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody9,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByteValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/byte/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "ByteArray" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putByteValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/byte/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody10,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByteInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/byte/invalidnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "ByteArray" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getBase64UrlOperationSpec: coreClient.OperationSpec = {
  path: "/array/prim/base64url/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Sequence", element: { type: { name: "Base64Url" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComplexNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/complex/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Product" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComplexEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/array/complex/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Product" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComplexItemNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/complex/itemnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Product" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComplexItemEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/array/complex/itemempty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Product" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComplexValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/complex/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Product" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putComplexValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/complex/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody11,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getArrayNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/array/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getArrayEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/array/array/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getArrayItemNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/array/itemnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getArrayItemEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/array/array/itemempty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getArrayValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/array/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putArrayValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/array/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody12,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDictionaryNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/dictionary/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDictionaryEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/array/dictionary/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDictionaryItemNullOperationSpec: coreClient.OperationSpec = {
  path: "/array/dictionary/itemnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDictionaryItemEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/array/dictionary/itemempty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDictionaryValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/dictionary/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDictionaryValidOperationSpec: coreClient.OperationSpec = {
  path: "/array/dictionary/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody13,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
