/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreHttps from "@azure/core-rest-pipeline";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BodyDictionaryClientContext } from "../bodyDictionaryClientContext";
import {
  DictionaryGetNullResponse,
  DictionaryGetEmptyResponse,
  DictionaryGetNullValueResponse,
  DictionaryGetNullKeyResponse,
  DictionaryGetEmptyStringKeyResponse,
  DictionaryGetInvalidResponse,
  DictionaryGetBooleanTfftResponse,
  DictionaryGetBooleanInvalidNullResponse,
  DictionaryGetBooleanInvalidStringResponse,
  DictionaryGetIntegerValidResponse,
  DictionaryGetIntInvalidNullResponse,
  DictionaryGetIntInvalidStringResponse,
  DictionaryGetLongValidResponse,
  DictionaryGetLongInvalidNullResponse,
  DictionaryGetLongInvalidStringResponse,
  DictionaryGetFloatValidResponse,
  DictionaryGetFloatInvalidNullResponse,
  DictionaryGetFloatInvalidStringResponse,
  DictionaryGetDoubleValidResponse,
  DictionaryGetDoubleInvalidNullResponse,
  DictionaryGetDoubleInvalidStringResponse,
  DictionaryGetStringValidResponse,
  DictionaryGetStringWithNullResponse,
  DictionaryGetStringWithInvalidResponse,
  DictionaryGetDateValidResponse,
  DictionaryGetDateInvalidNullResponse,
  DictionaryGetDateInvalidCharsResponse,
  DictionaryGetDateTimeValidResponse,
  DictionaryGetDateTimeInvalidNullResponse,
  DictionaryGetDateTimeInvalidCharsResponse,
  DictionaryGetDateTimeRfc1123ValidResponse,
  DictionaryGetDurationValidResponse,
  DictionaryGetByteValidResponse,
  DictionaryGetByteInvalidNullResponse,
  DictionaryGetBase64UrlResponse,
  DictionaryGetComplexNullResponse,
  DictionaryGetComplexEmptyResponse,
  DictionaryGetComplexItemNullResponse,
  DictionaryGetComplexItemEmptyResponse,
  DictionaryGetComplexValidResponse,
  Widget,
  DictionaryGetArrayNullResponse,
  DictionaryGetArrayEmptyResponse,
  DictionaryGetArrayItemNullResponse,
  DictionaryGetArrayItemEmptyResponse,
  DictionaryGetArrayValidResponse,
  DictionaryGetDictionaryNullResponse,
  DictionaryGetDictionaryEmptyResponse,
  DictionaryGetDictionaryItemNullResponse,
  DictionaryGetDictionaryItemEmptyResponse,
  DictionaryGetDictionaryValidResponse
} from "../models";

/** Class representing a Dictionary. */
export class Dictionary {
  private readonly client: BodyDictionaryClientContext;

  /**
   * Initialize a new instance of the class Dictionary class.
   * @param client Reference to the service client
   */
  constructor(client: BodyDictionaryClientContext) {
    this.client = client;
  }

  /**
   * Get null dictionary value
   * @param options The options parameters.
   */
  getNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetNullResponse> {
    return this.client.sendOperationRequest({ options }, getNullOperationSpec);
  }

  /**
   * Get empty dictionary value {}
   * @param options The options parameters.
   */
  getEmpty(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetEmptyResponse> {
    return this.client.sendOperationRequest({ options }, getEmptyOperationSpec);
  }

  /**
   * Set dictionary value empty {}
   * @param arrayBody The empty dictionary value {}
   * @param options The options parameters.
   */
  putEmpty(
    arrayBody: { [propertyName: string]: string },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putEmptyOperationSpec
    );
  }

  /**
   * Get Dictionary with null value
   * @param options The options parameters.
   */
  getNullValue(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetNullValueResponse> {
    return this.client.sendOperationRequest(
      { options },
      getNullValueOperationSpec
    );
  }

  /**
   * Get Dictionary with null key
   * @param options The options parameters.
   */
  getNullKey(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetNullKeyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getNullKeyOperationSpec
    );
  }

  /**
   * Get Dictionary with key as empty string
   * @param options The options parameters.
   */
  getEmptyStringKey(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetEmptyStringKeyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getEmptyStringKeyOperationSpec
    );
  }

  /**
   * Get invalid Dictionary value
   * @param options The options parameters.
   */
  getInvalid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetInvalidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getInvalidOperationSpec
    );
  }

  /**
   * Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
   * @param options The options parameters.
   */
  getBooleanTfft(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetBooleanTfftResponse> {
    return this.client.sendOperationRequest(
      { options },
      getBooleanTfftOperationSpec
    );
  }

  /**
   * Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
   * @param arrayBody The dictionary value {"0": true, "1": false, "2": false, "3": true }
   * @param options The options parameters.
   */
  putBooleanTfft(
    arrayBody: { [propertyName: string]: boolean },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putBooleanTfftOperationSpec
    );
  }

  /**
   * Get boolean dictionary value {"0": true, "1": null, "2": false }
   * @param options The options parameters.
   */
  getBooleanInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetBooleanInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getBooleanInvalidNullOperationSpec
    );
  }

  /**
   * Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
   * @param options The options parameters.
   */
  getBooleanInvalidString(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetBooleanInvalidStringResponse> {
    return this.client.sendOperationRequest(
      { options },
      getBooleanInvalidStringOperationSpec
    );
  }

  /**
   * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
   * @param options The options parameters.
   */
  getIntegerValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetIntegerValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getIntegerValidOperationSpec
    );
  }

  /**
   * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
   * @param arrayBody The dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
   * @param options The options parameters.
   */
  putIntegerValid(
    arrayBody: { [propertyName: string]: number },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putIntegerValidOperationSpec
    );
  }

  /**
   * Get integer dictionary value {"0": 1, "1": null, "2": 0}
   * @param options The options parameters.
   */
  getIntInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetIntInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getIntInvalidNullOperationSpec
    );
  }

  /**
   * Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
   * @param options The options parameters.
   */
  getIntInvalidString(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetIntInvalidStringResponse> {
    return this.client.sendOperationRequest(
      { options },
      getIntInvalidStringOperationSpec
    );
  }

  /**
   * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
   * @param options The options parameters.
   */
  getLongValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetLongValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getLongValidOperationSpec
    );
  }

  /**
   * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
   * @param arrayBody The dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
   * @param options The options parameters.
   */
  putLongValid(
    arrayBody: { [propertyName: string]: number },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putLongValidOperationSpec
    );
  }

  /**
   * Get long dictionary value {"0": 1, "1": null, "2": 0}
   * @param options The options parameters.
   */
  getLongInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetLongInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getLongInvalidNullOperationSpec
    );
  }

  /**
   * Get long dictionary value {"0": 1, "1": "integer", "2": 0}
   * @param options The options parameters.
   */
  getLongInvalidString(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetLongInvalidStringResponse> {
    return this.client.sendOperationRequest(
      { options },
      getLongInvalidStringOperationSpec
    );
  }

  /**
   * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
   * @param options The options parameters.
   */
  getFloatValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetFloatValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getFloatValidOperationSpec
    );
  }

  /**
   * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
   * @param arrayBody The dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
   * @param options The options parameters.
   */
  putFloatValid(
    arrayBody: { [propertyName: string]: number },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putFloatValidOperationSpec
    );
  }

  /**
   * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
   * @param options The options parameters.
   */
  getFloatInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetFloatInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getFloatInvalidNullOperationSpec
    );
  }

  /**
   * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
   * @param options The options parameters.
   */
  getFloatInvalidString(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetFloatInvalidStringResponse> {
    return this.client.sendOperationRequest(
      { options },
      getFloatInvalidStringOperationSpec
    );
  }

  /**
   * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
   * @param options The options parameters.
   */
  getDoubleValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDoubleValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDoubleValidOperationSpec
    );
  }

  /**
   * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
   * @param arrayBody The dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
   * @param options The options parameters.
   */
  putDoubleValid(
    arrayBody: { [propertyName: string]: number },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDoubleValidOperationSpec
    );
  }

  /**
   * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
   * @param options The options parameters.
   */
  getDoubleInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDoubleInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDoubleInvalidNullOperationSpec
    );
  }

  /**
   * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
   * @param options The options parameters.
   */
  getDoubleInvalidString(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDoubleInvalidStringResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDoubleInvalidStringOperationSpec
    );
  }

  /**
   * Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
   * @param options The options parameters.
   */
  getStringValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetStringValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getStringValidOperationSpec
    );
  }

  /**
   * Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
   * @param arrayBody The dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
   * @param options The options parameters.
   */
  putStringValid(
    arrayBody: { [propertyName: string]: string },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putStringValidOperationSpec
    );
  }

  /**
   * Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
   * @param options The options parameters.
   */
  getStringWithNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetStringWithNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getStringWithNullOperationSpec
    );
  }

  /**
   * Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
   * @param options The options parameters.
   */
  getStringWithInvalid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetStringWithInvalidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getStringWithInvalidOperationSpec
    );
  }

  /**
   * Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
   * @param options The options parameters.
   */
  getDateValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDateValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateValidOperationSpec
    );
  }

  /**
   * Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
   * @param arrayBody The dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
   * @param options The options parameters.
   */
  putDateValid(
    arrayBody: { [propertyName: string]: Date },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDateValidOperationSpec
    );
  }

  /**
   * Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
   * @param options The options parameters.
   */
  getDateInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDateInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateInvalidNullOperationSpec
    );
  }

  /**
   * Get date dictionary value {"0": "2011-03-22", "1": "date"}
   * @param options The options parameters.
   */
  getDateInvalidChars(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDateInvalidCharsResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateInvalidCharsOperationSpec
    );
  }

  /**
   * Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
   * "1492-10-12T10:15:01-08:00"}
   * @param options The options parameters.
   */
  getDateTimeValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDateTimeValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateTimeValidOperationSpec
    );
  }

  /**
   * Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
   * "1492-10-12T10:15:01-08:00"}
   * @param arrayBody The dictionary value {"0": "2000-12-01t00:00:01z", "1":
   *                  "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
   * @param options The options parameters.
   */
  putDateTimeValid(
    arrayBody: { [propertyName: string]: Date },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDateTimeValidOperationSpec
    );
  }

  /**
   * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
   * @param options The options parameters.
   */
  getDateTimeInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDateTimeInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateTimeInvalidNullOperationSpec
    );
  }

  /**
   * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
   * @param options The options parameters.
   */
  getDateTimeInvalidChars(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDateTimeInvalidCharsResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateTimeInvalidCharsOperationSpec
    );
  }

  /**
   * Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980
   * 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
   * @param options The options parameters.
   */
  getDateTimeRfc1123Valid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDateTimeRfc1123ValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDateTimeRfc1123ValidOperationSpec
    );
  }

  /**
   * Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35
   * GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
   * @param arrayBody The dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980
   *                  00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
   * @param options The options parameters.
   */
  putDateTimeRfc1123Valid(
    arrayBody: { [propertyName: string]: Date },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDateTimeRfc1123ValidOperationSpec
    );
  }

  /**
   * Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
   * @param options The options parameters.
   */
  getDurationValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDurationValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDurationValidOperationSpec
    );
  }

  /**
   * Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
   * @param arrayBody The dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
   * @param options The options parameters.
   */
  putDurationValid(
    arrayBody: { [propertyName: string]: string },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDurationValidOperationSpec
    );
  }

  /**
   * Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with
   * each item encoded in base64
   * @param options The options parameters.
   */
  getByteValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetByteValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getByteValidOperationSpec
    );
  }

  /**
   * Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with
   * each elementencoded in base 64
   * @param arrayBody The dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29,
   *                  43)} with each elementencoded in base 64
   * @param options The options parameters.
   */
  putByteValid(
    arrayBody: { [propertyName: string]: Uint8Array },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putByteValidOperationSpec
    );
  }

  /**
   * Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded
   * @param options The options parameters.
   */
  getByteInvalidNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetByteInvalidNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getByteInvalidNullOperationSpec
    );
  }

  /**
   * Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test
   * string", "2": "Lorem ipsum"}
   * @param options The options parameters.
   */
  getBase64Url(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetBase64UrlResponse> {
    return this.client.sendOperationRequest(
      { options },
      getBase64UrlOperationSpec
    );
  }

  /**
   * Get dictionary of complex type null value
   * @param options The options parameters.
   */
  getComplexNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetComplexNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplexNullOperationSpec
    );
  }

  /**
   * Get empty dictionary of complex type {}
   * @param options The options parameters.
   */
  getComplexEmpty(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetComplexEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplexEmptyOperationSpec
    );
  }

  /**
   * Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2":
   * {"integer": 5, "string": "6"}}
   * @param options The options parameters.
   */
  getComplexItemNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetComplexItemNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplexItemNullOperationSpec
    );
  }

  /**
   * Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2":
   * {"integer": 5, "string": "6"}}
   * @param options The options parameters.
   */
  getComplexItemEmpty(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetComplexItemEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplexItemEmptyOperationSpec
    );
  }

  /**
   * Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3,
   * "string": "4"}, "2": {"integer": 5, "string": "6"}}
   * @param options The options parameters.
   */
  getComplexValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetComplexValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getComplexValidOperationSpec
    );
  }

  /**
   * Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer":
   * 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
   * @param arrayBody Dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1":
   *                  {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
   * @param options The options parameters.
   */
  putComplexValid(
    arrayBody: { [propertyName: string]: Widget },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putComplexValidOperationSpec
    );
  }

  /**
   * Get a null array
   * @param options The options parameters.
   */
  getArrayNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetArrayNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getArrayNullOperationSpec
    );
  }

  /**
   * Get an empty dictionary {}
   * @param options The options parameters.
   */
  getArrayEmpty(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetArrayEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getArrayEmptyOperationSpec
    );
  }

  /**
   * Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}
   * @param options The options parameters.
   */
  getArrayItemNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetArrayItemNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getArrayItemNullOperationSpec
    );
  }

  /**
   * Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}
   * @param options The options parameters.
   */
  getArrayItemEmpty(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetArrayItemEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getArrayItemEmptyOperationSpec
    );
  }

  /**
   * Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
   * @param options The options parameters.
   */
  getArrayValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetArrayValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getArrayValidOperationSpec
    );
  }

  /**
   * Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
   * @param arrayBody An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2":
   *                  ["7", "8", "9"]}
   * @param options The options parameters.
   */
  putArrayValid(
    arrayBody: { [propertyName: string]: string[] },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putArrayValidOperationSpec
    );
  }

  /**
   * Get an dictionaries of dictionaries with value null
   * @param options The options parameters.
   */
  getDictionaryNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDictionaryNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDictionaryNullOperationSpec
    );
  }

  /**
   * Get an dictionaries of dictionaries of type <string, string> with value {}
   * @param options The options parameters.
   */
  getDictionaryEmpty(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDictionaryEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDictionaryEmptyOperationSpec
    );
  }

  /**
   * Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
   * "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}
   * @param options The options parameters.
   */
  getDictionaryItemNull(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDictionaryItemNullResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDictionaryItemNullOperationSpec
    );
  }

  /**
   * Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
   * "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
   * @param options The options parameters.
   */
  getDictionaryItemEmpty(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDictionaryItemEmptyResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDictionaryItemEmptyOperationSpec
    );
  }

  /**
   * Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
   * "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight",
   * "9": "nine"}}
   * @param options The options parameters.
   */
  getDictionaryValid(
    options?: coreClient.OperationOptions
  ): Promise<DictionaryGetDictionaryValidResponse> {
    return this.client.sendOperationRequest(
      { options },
      getDictionaryValidOperationSpec
    );
  }

  /**
   * Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
   * "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight",
   * "9": "nine"}}
   * @param arrayBody An dictionaries of dictionaries of type <string, string> with value {"0": {"1":
   *                  "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven",
   *                  "8": "eight", "9": "nine"}}
   * @param options The options parameters.
   */
  putDictionaryValid(
    arrayBody: { [propertyName: string]: { [propertyName: string]: string } },
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { arrayBody, options },
      putDictionaryValidOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/empty",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getNullValueOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/nullvalue",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getNullKeyOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/nullkey",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getEmptyStringKeyOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/keyemptystring",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getInvalidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/invalid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getBooleanTfftOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/boolean/tfft",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Boolean" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putBooleanTfftOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/boolean/tfft",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getBooleanInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/boolean/true.null.false",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Boolean" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getBooleanInvalidStringOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/boolean/true.boolean.false",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Boolean" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getIntegerValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/integer/1.-1.3.300",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putIntegerValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/integer/1.-1.3.300",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getIntInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/integer/1.null.zero",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getIntInvalidStringOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/integer/1.integer.0",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getLongValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/long/1.-1.3.300",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putLongValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/long/1.-1.3.300",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getLongInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/long/1.null.zero",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getLongInvalidStringOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/long/1.integer.0",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getFloatValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/float/0--0.01-1.2e20",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putFloatValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/float/0--0.01-1.2e20",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getFloatInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/float/0.0-null-1.2e20",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getFloatInvalidStringOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/float/1.number.0",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDoubleValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/double/0--0.01-1.2e20",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDoubleValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/double/0--0.01-1.2e20",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDoubleInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/double/0.0-null-1.2e20",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDoubleInvalidStringOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/double/1.number.0",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Number" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getStringValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/string/foo1.foo2.foo3",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putStringValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/string/foo1.foo2.foo3",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getStringWithNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/string/foo.null.foo2",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getStringWithInvalidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/string/foo.123.foo2",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "String" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDateValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/date/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Date" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDateValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/date/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody3,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDateInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/date/invalidnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Date" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDateInvalidCharsOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/date/invalidchars",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Date" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDateTimeValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/date-time/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "DateTime" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDateTimeValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/date-time/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDateTimeInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/date-time/invalidnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "DateTime" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDateTimeInvalidCharsOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/date-time/invalidchars",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "DateTime" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDateTimeRfc1123ValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/date-time-rfc1123/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: { type: { name: "DateTimeRfc1123" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDateTimeRfc1123ValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/date-time-rfc1123/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody5,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDurationValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/duration/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "TimeSpan" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDurationValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/duration/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody6,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByteValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/byte/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "ByteArray" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putByteValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/byte/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody7,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getByteInvalidNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/byte/invalidnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "ByteArray" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getBase64UrlOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/prim/base64url/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "Base64Url" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComplexNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/complex/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Widget" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComplexEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/complex/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Widget" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComplexItemNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/complex/itemnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Widget" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComplexItemEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/complex/itemempty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Widget" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComplexValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/complex/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Widget" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putComplexValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/complex/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody8,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getArrayNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/array/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getArrayEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/array/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getArrayItemNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/array/itemnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getArrayItemEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/array/itemempty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getArrayValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/array/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putArrayValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/array/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody9,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDictionaryNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/dictionary/null",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDictionaryEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/dictionary/empty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDictionaryItemNullOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/dictionary/itemnull",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDictionaryItemEmptyOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/dictionary/itemempty",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getDictionaryValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/dictionary/valid",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "String" } } }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const putDictionaryValidOperationSpec: coreClient.OperationSpec = {
  path: "/dictionary/dictionary/valid",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.arrayBody10,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
